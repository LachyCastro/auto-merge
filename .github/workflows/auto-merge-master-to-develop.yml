name: Sync main → develop (Custom Action)

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
    types:
      - closed

permissions:
  contents: write
  pull-requests: write

jobs:
  sync-main-to-develop:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configure git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Create temporary branch based on main
        id: create_branch
        run: |
          BRANCH="auto/sync-main-develop-$(date +%s)"
          echo "BRANCH=$BRANCH" >> $GITHUB_ENV

          git fetch origin main
          git fetch origin develop

          # Crear rama temporal basada en main
          git checkout -b $BRANCH origin/main

          # Push de la rama temporal
          git push origin $BRANCH

      - name: Create Pull Request via GitHub API
        id: create_pr
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_FOR_PR }}
          BRANCH: ${{ env.BRANCH }}
          REPO: ${{ github.repository }}
        run: |
          # Crear PR
          RESPONSE=$(curl -s -X POST \
            -H "Authorization: token $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github+json" \
            "https://api.github.com/repos/$REPO/pulls" \
            -d "$(jq -n \
                  --arg title "chore: sync main → develop [automated]" \
                  --arg head "$BRANCH" \
                  --arg base "develop" \
                  --arg body "This PR was automatically created to sync main into develop." \
                  '{title: $title, head: $head, base: $base, body: $body}')")

          PR_NUMBER=$(echo "$RESPONSE" | jq -r '.number')
          echo "PR_NUMBER=$PR_NUMBER" >> $GITHUB_ENV
          echo "PR created: $PR_NUMBER"

      - name: Merge Pull Request if no conflicts
        if: env.PR_NUMBER != ''
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_FOR_PR }}
          REPO: ${{ github.repository }}
          PR_NUMBER: ${{ env.PR_NUMBER }}
        run: |
          # Esperar a que GitHub calcule mergeable
          for i in {1..5}; do
            MERGEABLE=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
              -H "Accept: application/vnd.github+json" \
              "https://api.github.com/repos/$REPO/pulls/$PR_NUMBER" \
              | jq -r '.mergeable')

            if [ "$MERGEABLE" != "null" ]; then
              break
            fi
            echo "mergeable = null, retrying in 2s..."
            sleep 2
          done

          if [ "$MERGEABLE" = "true" ]; then
            curl -s -X PUT \
              -H "Authorization: token $GITHUB_TOKEN" \
              -H "Accept: application/vnd.github+json" \
              "https://api.github.com/repos/$REPO/pulls/$PR_NUMBER/merge" \
              -d '{"merge_method": "merge"}'
            echo "PR merged successfully."
          else
            echo "PR has conflicts or is not mergeable. Merge skipped."
          fi

      - name: Delete temporary branch
        if: env.PR_NUMBER != ''
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_FOR_PR }}
          BRANCH: ${{ env.BRANCH }}
          REPO: ${{ github.repository }}
        run: |
          curl -s -X DELETE \
            -H "Authorization: token $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github+json" \
            "https://api.github.com/repos/$REPO/git/refs/heads/$BRANCH"
          echo "Temporary branch $BRANCH deleted."
